#include <bits/stdc++.h>

using namespace std;

int minCost(vector<vector<int>>& grid) {
    int n = grid.size();
    int m = grid[0].size();
    
    // Initialize a 2D DP array with large values
    vector<vector<int>> dp(n, vector<int>(m, INT_MAX));
    
    // Initialize the top-left cell
    dp[0][0] = 0;
    
    // Define the possible directions
    vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; // Right, Left, Down, Up
    
    // Iterate through the grid in a specific order
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            // Calculate the minimum cost to reach (i, j) from its adjacent cells based on grid[i][j]
            for (const auto& dir : directions) {
                int x = i + dir.first;
                int y = j + dir.second;
                
                if (x >= 0 && x < n && y >= 0 && y < m) {
                    int cost = (grid[i][j] != (x == i ? 1 : 3)) + (grid[i][j] != (y == j ? 1 : 2));
                    dp[i][j] = min(dp[i][j], dp[x][y] + cost);
                }
            }
        }
    }
    
    // Return the minimum cost to reach the bottom-right cell
    return dp[n - 1][m - 1];
}

int main() {
    int n, m;
    cin >> n >> m;
    
    vector<vector<int>> grid(n, vector<int>(m));
    
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> grid[i][j];
        }
    }
    
    int result = minCost(grid);
    cout << result << endl;
    
    return 0;
}
